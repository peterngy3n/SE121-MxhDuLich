import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for performing CRUD operations on models.
 *  Recommendation models contain all the metadata necessary to generate a set of
 *  models for the `Predict()` API. A model is queried
 *  indirectly via a ServingConfig, which associates a model with a
 *  given Placement (e.g. Frequently Bought Together on Home Page).
 *
 *  This service allows you to do the following:
 *
 *  * Initiate training of a model.
 *  * Pause training of an existing model.
 *  * List all the available models along with their metadata.
 *  * Control their tuning schedule.
 * @class
 * @memberof v2beta
 */
export declare class ModelServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    modelServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ModelServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ModelServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the
     *   {@link protos.google.cloud.retail.v2beta.Model|Model} to get. Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog}/models/{model_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2beta.Model|Model}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.get_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_GetModel_async
     */
    getModel(request?: protos.google.cloud.retail.v2beta.IGetModelRequest, options?: CallOptions): Promise<[
        protos.google.cloud.retail.v2beta.IModel,
        protos.google.cloud.retail.v2beta.IGetModelRequest | undefined,
        {} | undefined
    ]>;
    getModel(request: protos.google.cloud.retail.v2beta.IGetModelRequest, options: CallOptions, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IGetModelRequest | null | undefined, {} | null | undefined>): void;
    getModel(request: protos.google.cloud.retail.v2beta.IGetModelRequest, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IGetModelRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Pauses the training of an existing model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the model to pause.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2beta.Model|Model}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.pause_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_PauseModel_async
     */
    pauseModel(request?: protos.google.cloud.retail.v2beta.IPauseModelRequest, options?: CallOptions): Promise<[
        protos.google.cloud.retail.v2beta.IModel,
        protos.google.cloud.retail.v2beta.IPauseModelRequest | undefined,
        {} | undefined
    ]>;
    pauseModel(request: protos.google.cloud.retail.v2beta.IPauseModelRequest, options: CallOptions, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IPauseModelRequest | null | undefined, {} | null | undefined>): void;
    pauseModel(request: protos.google.cloud.retail.v2beta.IPauseModelRequest, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IPauseModelRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Resumes the training of an existing model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the model to resume.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2beta.Model|Model}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.resume_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_ResumeModel_async
     */
    resumeModel(request?: protos.google.cloud.retail.v2beta.IResumeModelRequest, options?: CallOptions): Promise<[
        protos.google.cloud.retail.v2beta.IModel,
        protos.google.cloud.retail.v2beta.IResumeModelRequest | undefined,
        {} | undefined
    ]>;
    resumeModel(request: protos.google.cloud.retail.v2beta.IResumeModelRequest, options: CallOptions, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IResumeModelRequest | null | undefined, {} | null | undefined>): void;
    resumeModel(request: protos.google.cloud.retail.v2beta.IResumeModelRequest, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IResumeModelRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes an existing model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the
     *   {@link protos.google.cloud.retail.v2beta.Model|Model} to delete. Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.delete_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_DeleteModel_async
     */
    deleteModel(request?: protos.google.cloud.retail.v2beta.IDeleteModelRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.retail.v2beta.IDeleteModelRequest | undefined,
        {} | undefined
    ]>;
    deleteModel(request: protos.google.cloud.retail.v2beta.IDeleteModelRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.retail.v2beta.IDeleteModelRequest | null | undefined, {} | null | undefined>): void;
    deleteModel(request: protos.google.cloud.retail.v2beta.IDeleteModelRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.retail.v2beta.IDeleteModelRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Update of model metadata. Only fields that
     * currently can be updated are: `filtering_option` and
     * `periodic_tuning_state`.
     * If other values are provided, this API method ignores them.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.retail.v2beta.Model} request.model
     *   Required. The body of the updated
     *   {@link protos.google.cloud.retail.v2beta.Model|Model}.
     * @param {google.protobuf.FieldMask} [request.updateMask]
     *   Optional. Indicates which fields in the provided 'model' to
     *   update. If not set, by default updates all fields.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.retail.v2beta.Model|Model}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.update_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_UpdateModel_async
     */
    updateModel(request?: protos.google.cloud.retail.v2beta.IUpdateModelRequest, options?: CallOptions): Promise<[
        protos.google.cloud.retail.v2beta.IModel,
        protos.google.cloud.retail.v2beta.IUpdateModelRequest | undefined,
        {} | undefined
    ]>;
    updateModel(request: protos.google.cloud.retail.v2beta.IUpdateModelRequest, options: CallOptions, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IUpdateModelRequest | null | undefined, {} | null | undefined>): void;
    updateModel(request: protos.google.cloud.retail.v2beta.IUpdateModelRequest, callback: Callback<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.IUpdateModelRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource under which to create the model. Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
     * @param {google.cloud.retail.v2beta.Model} request.model
     *   Required. The payload of the {@link protos.google.cloud.retail.v2beta.Model|Model}  to
     *   create.
     * @param {boolean} [request.dryRun]
     *   Optional. Whether to run a dry run to validate the request (without
     *   actually creating the model).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.create_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_CreateModel_async
     */
    createModel(request?: protos.google.cloud.retail.v2beta.ICreateModelRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.ICreateModelMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createModel(request: protos.google.cloud.retail.v2beta.ICreateModelRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.ICreateModelMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createModel(request: protos.google.cloud.retail.v2beta.ICreateModelRequest, callback: Callback<LROperation<protos.google.cloud.retail.v2beta.IModel, protos.google.cloud.retail.v2beta.ICreateModelMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.create_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_CreateModel_async
     */
    checkCreateModelProgress(name: string): Promise<LROperation<protos.google.cloud.retail.v2beta.Model, protos.google.cloud.retail.v2beta.CreateModelMetadata>>;
    /**
     * Tunes an existing model.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the model to tune.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.tune_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_TuneModel_async
     */
    tuneModel(request?: protos.google.cloud.retail.v2beta.ITuneModelRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.retail.v2beta.ITuneModelResponse, protos.google.cloud.retail.v2beta.ITuneModelMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    tuneModel(request: protos.google.cloud.retail.v2beta.ITuneModelRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.retail.v2beta.ITuneModelResponse, protos.google.cloud.retail.v2beta.ITuneModelMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    tuneModel(request: protos.google.cloud.retail.v2beta.ITuneModelRequest, callback: Callback<LROperation<protos.google.cloud.retail.v2beta.ITuneModelResponse, protos.google.cloud.retail.v2beta.ITuneModelMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `tuneModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.tune_model.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_TuneModel_async
     */
    checkTuneModelProgress(name: string): Promise<LROperation<protos.google.cloud.retail.v2beta.TuneModelResponse, protos.google.cloud.retail.v2beta.TuneModelMetadata>>;
    /**
     * Lists all the models linked to this event store.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent for which to list models.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListModels`
     *   call. Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.retail.v2beta.Model|Model}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listModelsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listModels(request?: protos.google.cloud.retail.v2beta.IListModelsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.retail.v2beta.IModel[],
        protos.google.cloud.retail.v2beta.IListModelsRequest | null,
        protos.google.cloud.retail.v2beta.IListModelsResponse
    ]>;
    listModels(request: protos.google.cloud.retail.v2beta.IListModelsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.retail.v2beta.IListModelsRequest, protos.google.cloud.retail.v2beta.IListModelsResponse | null | undefined, protos.google.cloud.retail.v2beta.IModel>): void;
    listModels(request: protos.google.cloud.retail.v2beta.IListModelsRequest, callback: PaginationCallback<protos.google.cloud.retail.v2beta.IListModelsRequest, protos.google.cloud.retail.v2beta.IListModelsResponse | null | undefined, protos.google.cloud.retail.v2beta.IModel>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent for which to list models.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListModels`
     *   call. Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.retail.v2beta.Model|Model} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listModelsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listModelsStream(request?: protos.google.cloud.retail.v2beta.IListModelsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listModels`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent for which to list models.
     *   Format:
     *   `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} [request.pageToken]
     *   Optional. A page token, received from a previous `ListModels`
     *   call. Provide this to retrieve the subsequent page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.retail.v2beta.Model|Model}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2beta/model_service.list_models.js</caption>
     * region_tag:retail_v2beta_generated_ModelService_ListModels_async
     */
    listModelsAsync(request?: protos.google.cloud.retail.v2beta.IListModelsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.retail.v2beta.IModel>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified alertConfig resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    alertConfigPath(project: string): string;
    /**
     * Parse the project from AlertConfig resource.
     *
     * @param {string} alertConfigName
     *   A fully-qualified path representing AlertConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAlertConfigName(alertConfigName: string): string | number;
    /**
     * Return a fully-qualified attributesConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    attributesConfigPath(project: string, location: string, catalog: string): string;
    /**
     * Parse the project from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAttributesConfigName(attributesConfigName: string): string | number;
    /**
     * Parse the location from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAttributesConfigName(attributesConfigName: string): string | number;
    /**
     * Parse the catalog from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromAttributesConfigName(attributesConfigName: string): string | number;
    /**
     * Return a fully-qualified catalog resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    catalogPath(project: string, location: string, catalog: string): string;
    /**
     * Parse the project from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCatalogName(catalogName: string): string | number;
    /**
     * Parse the location from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCatalogName(catalogName: string): string | number;
    /**
     * Parse the catalog from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromCatalogName(catalogName: string): string | number;
    /**
     * Return a fully-qualified completionConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    completionConfigPath(project: string, location: string, catalog: string): string;
    /**
     * Parse the project from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCompletionConfigName(completionConfigName: string): string | number;
    /**
     * Parse the location from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCompletionConfigName(completionConfigName: string): string | number;
    /**
     * Parse the catalog from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromCompletionConfigName(completionConfigName: string): string | number;
    /**
     * Return a fully-qualified control resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} control
     * @returns {string} Resource name string.
     */
    controlPath(project: string, location: string, catalog: string, control: string): string;
    /**
     * Parse the project from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromControlName(controlName: string): string | number;
    /**
     * Parse the location from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromControlName(controlName: string): string | number;
    /**
     * Parse the catalog from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromControlName(controlName: string): string | number;
    /**
     * Parse the control from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the control.
     */
    matchControlFromControlName(controlName: string): string | number;
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project: string, location: string, catalog: string, model: string): string;
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName: string): string | number;
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName: string): string | number;
    /**
     * Parse the catalog from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromModelName(modelName: string): string | number;
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName: string): string | number;
    /**
     * Return a fully-qualified product resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} branch
     * @param {string} product
     * @returns {string} Resource name string.
     */
    productPath(project: string, location: string, catalog: string, branch: string, product: string): string;
    /**
     * Parse the project from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProductName(productName: string): string | number;
    /**
     * Parse the location from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProductName(productName: string): string | number;
    /**
     * Parse the catalog from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromProductName(productName: string): string | number;
    /**
     * Parse the branch from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProductName(productName: string): string | number;
    /**
     * Parse the product from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the product.
     */
    matchProductFromProductName(productName: string): string | number;
    /**
     * Return a fully-qualified servingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    servingConfigPath(project: string, location: string, catalog: string, servingConfig: string): string;
    /**
     * Parse the project from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServingConfigName(servingConfigName: string): string | number;
    /**
     * Parse the location from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServingConfigName(servingConfigName: string): string | number;
    /**
     * Parse the catalog from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromServingConfigName(servingConfigName: string): string | number;
    /**
     * Parse the serving_config from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromServingConfigName(servingConfigName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
