"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2/product_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./product_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for ingesting {@link protos.google.cloud.retail.v2.Product|Product} information
 *  of the customer's website.
 * @class
 * @memberof v2
 */
class ProductServiceClient {
    /**
     * Construct an instance of ProductServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ProductServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'retail.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            attributesConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/attributesConfig'),
            branchPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}'),
            catalogPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}'),
            completionConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/completionConfig'),
            controlPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/controls/{control}'),
            modelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/models/{model}'),
            productPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}/products/{product}'),
            servingConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/catalogs/{catalog}/servingConfigs/{serving_config}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listProducts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'products'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v2/{name=projects/*/locations/*/operations/*}',
                    additional_bindings: [
                        {
                            get: '/v2/{name=projects/*/locations/*/catalogs/*/branches/*/operations/*}',
                        },
                        { get: '/v2/{name=projects/*/locations/*/catalogs/*/operations/*}' },
                        { get: '/v2/{name=projects/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v2/{name=projects/*/locations/*}/operations',
                    additional_bindings: [
                        { get: '/v2/{name=projects/*/locations/*/catalogs/*}/operations' },
                        { get: '/v2/{name=projects/*}/operations' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const purgeProductsResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.PurgeProductsResponse');
        const purgeProductsMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.PurgeProductsMetadata');
        const importProductsResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.ImportProductsResponse');
        const importProductsMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.ImportMetadata');
        const setInventoryResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.SetInventoryResponse');
        const setInventoryMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.SetInventoryMetadata');
        const addFulfillmentPlacesResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.AddFulfillmentPlacesResponse');
        const addFulfillmentPlacesMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.AddFulfillmentPlacesMetadata');
        const removeFulfillmentPlacesResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.RemoveFulfillmentPlacesResponse');
        const removeFulfillmentPlacesMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.RemoveFulfillmentPlacesMetadata');
        const addLocalInventoriesResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.AddLocalInventoriesResponse');
        const addLocalInventoriesMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.AddLocalInventoriesMetadata');
        const removeLocalInventoriesResponse = protoFilesRoot.lookup('.google.cloud.retail.v2.RemoveLocalInventoriesResponse');
        const removeLocalInventoriesMetadata = protoFilesRoot.lookup('.google.cloud.retail.v2.RemoveLocalInventoriesMetadata');
        this.descriptors.longrunning = {
            purgeProducts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, purgeProductsResponse.decode.bind(purgeProductsResponse), purgeProductsMetadata.decode.bind(purgeProductsMetadata)),
            importProducts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importProductsResponse.decode.bind(importProductsResponse), importProductsMetadata.decode.bind(importProductsMetadata)),
            setInventory: new this._gaxModule.LongrunningDescriptor(this.operationsClient, setInventoryResponse.decode.bind(setInventoryResponse), setInventoryMetadata.decode.bind(setInventoryMetadata)),
            addFulfillmentPlaces: new this._gaxModule.LongrunningDescriptor(this.operationsClient, addFulfillmentPlacesResponse.decode.bind(addFulfillmentPlacesResponse), addFulfillmentPlacesMetadata.decode.bind(addFulfillmentPlacesMetadata)),
            removeFulfillmentPlaces: new this._gaxModule.LongrunningDescriptor(this.operationsClient, removeFulfillmentPlacesResponse.decode.bind(removeFulfillmentPlacesResponse), removeFulfillmentPlacesMetadata.decode.bind(removeFulfillmentPlacesMetadata)),
            addLocalInventories: new this._gaxModule.LongrunningDescriptor(this.operationsClient, addLocalInventoriesResponse.decode.bind(addLocalInventoriesResponse), addLocalInventoriesMetadata.decode.bind(addLocalInventoriesMetadata)),
            removeLocalInventories: new this._gaxModule.LongrunningDescriptor(this.operationsClient, removeLocalInventoriesResponse.decode.bind(removeLocalInventoriesResponse), removeLocalInventoriesMetadata.decode.bind(removeLocalInventoriesMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.retail.v2.ProductService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.productServiceStub) {
            return this.productServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.retail.v2.ProductService.
        this.productServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.retail.v2.ProductService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.retail.v2.ProductService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const productServiceStubMethods = [
            'createProduct',
            'getProduct',
            'listProducts',
            'updateProduct',
            'deleteProduct',
            'purgeProducts',
            'importProducts',
            'setInventory',
            'addFulfillmentPlaces',
            'removeFulfillmentPlaces',
            'addLocalInventories',
            'removeLocalInventories',
        ];
        for (const methodName of productServiceStubMethods) {
            const callPromise = this.productServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.productServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'retail.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'retail.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createProduct(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createProduct(request, options, callback);
    }
    getProduct(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getProduct(request, options, callback);
    }
    updateProduct(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'product.name': (_a = request.product.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateProduct(request, options, callback);
    }
    deleteProduct(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteProduct(request, options, callback);
    }
    purgeProducts(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.purgeProducts(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `purgeProducts()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.purge_products.js</caption>
     * region_tag:retail_v2_generated_ProductService_PurgeProducts_async
     */
    async checkPurgeProductsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.purgeProducts, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    importProducts(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.importProducts(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importProducts()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.import_products.js</caption>
     * region_tag:retail_v2_generated_ProductService_ImportProducts_async
     */
    async checkImportProductsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importProducts, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    setInventory(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'inventory.name': (_a = request.inventory.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.setInventory(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `setInventory()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.set_inventory.js</caption>
     * region_tag:retail_v2_generated_ProductService_SetInventory_async
     */
    async checkSetInventoryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.setInventory, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    addFulfillmentPlaces(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                product: (_a = request.product) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.addFulfillmentPlaces(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `addFulfillmentPlaces()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.add_fulfillment_places.js</caption>
     * region_tag:retail_v2_generated_ProductService_AddFulfillmentPlaces_async
     */
    async checkAddFulfillmentPlacesProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.addFulfillmentPlaces, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    removeFulfillmentPlaces(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                product: (_a = request.product) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.removeFulfillmentPlaces(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `removeFulfillmentPlaces()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.remove_fulfillment_places.js</caption>
     * region_tag:retail_v2_generated_ProductService_RemoveFulfillmentPlaces_async
     */
    async checkRemoveFulfillmentPlacesProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.removeFulfillmentPlaces, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    addLocalInventories(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                product: (_a = request.product) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.addLocalInventories(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `addLocalInventories()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.add_local_inventories.js</caption>
     * region_tag:retail_v2_generated_ProductService_AddLocalInventories_async
     */
    async checkAddLocalInventoriesProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.addLocalInventories, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    removeLocalInventories(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                product: (_a = request.product) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.removeLocalInventories(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `removeLocalInventories()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.remove_local_inventories.js</caption>
     * region_tag:retail_v2_generated_ProductService_RemoveLocalInventories_async
     */
    async checkRemoveLocalInventoriesProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.removeLocalInventories, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listProducts(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listProducts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent branch resource name, such as
     *   `projects/* /locations/global/catalogs/default_catalog/branches/0`. Use
     *   `default_branch` as the branch ID, to list products under the default
     *   branch.
     *
     *   If the caller does not have permission to list
     *   {@link protos.google.cloud.retail.v2.Product|Product}s under this branch, regardless of
     *   whether or not this branch exists, a PERMISSION_DENIED error is returned.
     * @param {number} request.pageSize
     *   Maximum number of {@link protos.google.cloud.retail.v2.Product|Product}s to return. If
     *   unspecified, defaults to 100. The maximum allowed value is 1000. Values
     *   above 1000 will be coerced to 1000.
     *
     *   If this field is negative, an INVALID_ARGUMENT error is returned.
     * @param {string} request.pageToken
     *   A page token
     *   {@link protos.google.cloud.retail.v2.ListProductsResponse.next_page_token|ListProductsResponse.next_page_token},
     *   received from a previous
     *   {@link protos.google.cloud.retail.v2.ProductService.ListProducts|ProductService.ListProducts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   {@link protos.google.cloud.retail.v2.ProductService.ListProducts|ProductService.ListProducts}
     *   must match the call that provided the page token. Otherwise, an
     *   INVALID_ARGUMENT error is returned.
     * @param {string} request.filter
     *   A filter to apply on the list results. Supported features:
     *
     *   * List all the products under the parent branch if
     *   {@link protos.google.cloud.retail.v2.ListProductsRequest.filter|filter} is unset.
     *   * List {@link protos.google.cloud.retail.v2.Product.Type.VARIANT|Product.Type.VARIANT}
     *   {@link protos.google.cloud.retail.v2.Product|Product}s sharing the same
     *     {@link protos.google.cloud.retail.v2.Product.Type.PRIMARY|Product.Type.PRIMARY}
     *     {@link protos.google.cloud.retail.v2.Product|Product}. For example:
     *       `primary_product_id = "some_product_id"`
     *   * List {@link protos.google.cloud.retail.v2.Product|Product}s bundled in a
     *   {@link protos.google.cloud.retail.v2.Product.Type.COLLECTION|Product.Type.COLLECTION}
     *   {@link protos.google.cloud.retail.v2.Product|Product}.
     *     For example:
     *       `collection_product_id = "some_product_id"`
     *   * List {@link protos.google.cloud.retail.v2.Product|Product}s with a partibular type.
     *   For example:
     *       `type = "PRIMARY"`
     *       `type = "VARIANT"`
     *       `type = "COLLECTION"`
     *
     *   If the field is unrecognizable, an INVALID_ARGUMENT error is returned.
     *
     *   If the specified
     *   {@link protos.google.cloud.retail.v2.Product.Type.PRIMARY|Product.Type.PRIMARY}
     *   {@link protos.google.cloud.retail.v2.Product|Product} or
     *   {@link protos.google.cloud.retail.v2.Product.Type.COLLECTION|Product.Type.COLLECTION}
     *   {@link protos.google.cloud.retail.v2.Product|Product} does not exist, a NOT_FOUND error
     *   is returned.
     * @param {google.protobuf.FieldMask} request.readMask
     *   The fields of {@link protos.google.cloud.retail.v2.Product|Product} to return in the
     *   responses. If not set or empty, the following fields are returned:
     *
     *   * {@link protos.google.cloud.retail.v2.Product.name|Product.name}
     *   * {@link protos.google.cloud.retail.v2.Product.id|Product.id}
     *   * {@link protos.google.cloud.retail.v2.Product.title|Product.title}
     *   * {@link protos.google.cloud.retail.v2.Product.uri|Product.uri}
     *   * {@link protos.google.cloud.retail.v2.Product.images|Product.images}
     *   * {@link protos.google.cloud.retail.v2.Product.price_info|Product.price_info}
     *   * {@link protos.google.cloud.retail.v2.Product.brands|Product.brands}
     *
     *   If "*" is provided, all fields are returned.
     *   {@link protos.google.cloud.retail.v2.Product.name|Product.name} is always returned no
     *   matter what mask is set.
     *
     *   If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
     *   is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.retail.v2.Product|Product} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listProductsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listProductsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProducts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProducts.createStream(this.innerApiCalls.listProducts, request, callSettings);
    }
    /**
     * Equivalent to `listProducts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent branch resource name, such as
     *   `projects/* /locations/global/catalogs/default_catalog/branches/0`. Use
     *   `default_branch` as the branch ID, to list products under the default
     *   branch.
     *
     *   If the caller does not have permission to list
     *   {@link protos.google.cloud.retail.v2.Product|Product}s under this branch, regardless of
     *   whether or not this branch exists, a PERMISSION_DENIED error is returned.
     * @param {number} request.pageSize
     *   Maximum number of {@link protos.google.cloud.retail.v2.Product|Product}s to return. If
     *   unspecified, defaults to 100. The maximum allowed value is 1000. Values
     *   above 1000 will be coerced to 1000.
     *
     *   If this field is negative, an INVALID_ARGUMENT error is returned.
     * @param {string} request.pageToken
     *   A page token
     *   {@link protos.google.cloud.retail.v2.ListProductsResponse.next_page_token|ListProductsResponse.next_page_token},
     *   received from a previous
     *   {@link protos.google.cloud.retail.v2.ProductService.ListProducts|ProductService.ListProducts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   {@link protos.google.cloud.retail.v2.ProductService.ListProducts|ProductService.ListProducts}
     *   must match the call that provided the page token. Otherwise, an
     *   INVALID_ARGUMENT error is returned.
     * @param {string} request.filter
     *   A filter to apply on the list results. Supported features:
     *
     *   * List all the products under the parent branch if
     *   {@link protos.google.cloud.retail.v2.ListProductsRequest.filter|filter} is unset.
     *   * List {@link protos.google.cloud.retail.v2.Product.Type.VARIANT|Product.Type.VARIANT}
     *   {@link protos.google.cloud.retail.v2.Product|Product}s sharing the same
     *     {@link protos.google.cloud.retail.v2.Product.Type.PRIMARY|Product.Type.PRIMARY}
     *     {@link protos.google.cloud.retail.v2.Product|Product}. For example:
     *       `primary_product_id = "some_product_id"`
     *   * List {@link protos.google.cloud.retail.v2.Product|Product}s bundled in a
     *   {@link protos.google.cloud.retail.v2.Product.Type.COLLECTION|Product.Type.COLLECTION}
     *   {@link protos.google.cloud.retail.v2.Product|Product}.
     *     For example:
     *       `collection_product_id = "some_product_id"`
     *   * List {@link protos.google.cloud.retail.v2.Product|Product}s with a partibular type.
     *   For example:
     *       `type = "PRIMARY"`
     *       `type = "VARIANT"`
     *       `type = "COLLECTION"`
     *
     *   If the field is unrecognizable, an INVALID_ARGUMENT error is returned.
     *
     *   If the specified
     *   {@link protos.google.cloud.retail.v2.Product.Type.PRIMARY|Product.Type.PRIMARY}
     *   {@link protos.google.cloud.retail.v2.Product|Product} or
     *   {@link protos.google.cloud.retail.v2.Product.Type.COLLECTION|Product.Type.COLLECTION}
     *   {@link protos.google.cloud.retail.v2.Product|Product} does not exist, a NOT_FOUND error
     *   is returned.
     * @param {google.protobuf.FieldMask} request.readMask
     *   The fields of {@link protos.google.cloud.retail.v2.Product|Product} to return in the
     *   responses. If not set or empty, the following fields are returned:
     *
     *   * {@link protos.google.cloud.retail.v2.Product.name|Product.name}
     *   * {@link protos.google.cloud.retail.v2.Product.id|Product.id}
     *   * {@link protos.google.cloud.retail.v2.Product.title|Product.title}
     *   * {@link protos.google.cloud.retail.v2.Product.uri|Product.uri}
     *   * {@link protos.google.cloud.retail.v2.Product.images|Product.images}
     *   * {@link protos.google.cloud.retail.v2.Product.price_info|Product.price_info}
     *   * {@link protos.google.cloud.retail.v2.Product.brands|Product.brands}
     *
     *   If "*" is provided, all fields are returned.
     *   {@link protos.google.cloud.retail.v2.Product.name|Product.name} is always returned no
     *   matter what mask is set.
     *
     *   If an unsupported or unknown field is provided, an INVALID_ARGUMENT error
     *   is returned.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.retail.v2.Product|Product}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/product_service.list_products.js</caption>
     * region_tag:retail_v2_generated_ProductService_ListProducts_async
     */
    listProductsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listProducts'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listProducts.asyncIterate(this.innerApiCalls['listProducts'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified attributesConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    attributesConfigPath(project, location, catalog) {
        return this.pathTemplates.attributesConfigPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
        });
    }
    /**
     * Parse the project from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAttributesConfigName(attributesConfigName) {
        return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).project;
    }
    /**
     * Parse the location from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAttributesConfigName(attributesConfigName) {
        return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).location;
    }
    /**
     * Parse the catalog from AttributesConfig resource.
     *
     * @param {string} attributesConfigName
     *   A fully-qualified path representing AttributesConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromAttributesConfigName(attributesConfigName) {
        return this.pathTemplates.attributesConfigPathTemplate.match(attributesConfigName).catalog;
    }
    /**
     * Return a fully-qualified branch resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} branch
     * @returns {string} Resource name string.
     */
    branchPath(project, location, catalog, branch) {
        return this.pathTemplates.branchPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
            branch: branch,
        });
    }
    /**
     * Parse the project from Branch resource.
     *
     * @param {string} branchName
     *   A fully-qualified path representing Branch resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBranchName(branchName) {
        return this.pathTemplates.branchPathTemplate.match(branchName).project;
    }
    /**
     * Parse the location from Branch resource.
     *
     * @param {string} branchName
     *   A fully-qualified path representing Branch resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBranchName(branchName) {
        return this.pathTemplates.branchPathTemplate.match(branchName).location;
    }
    /**
     * Parse the catalog from Branch resource.
     *
     * @param {string} branchName
     *   A fully-qualified path representing Branch resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromBranchName(branchName) {
        return this.pathTemplates.branchPathTemplate.match(branchName).catalog;
    }
    /**
     * Parse the branch from Branch resource.
     *
     * @param {string} branchName
     *   A fully-qualified path representing Branch resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromBranchName(branchName) {
        return this.pathTemplates.branchPathTemplate.match(branchName).branch;
    }
    /**
     * Return a fully-qualified catalog resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    catalogPath(project, location, catalog) {
        return this.pathTemplates.catalogPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
        });
    }
    /**
     * Parse the project from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCatalogName(catalogName) {
        return this.pathTemplates.catalogPathTemplate.match(catalogName).project;
    }
    /**
     * Parse the location from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCatalogName(catalogName) {
        return this.pathTemplates.catalogPathTemplate.match(catalogName).location;
    }
    /**
     * Parse the catalog from Catalog resource.
     *
     * @param {string} catalogName
     *   A fully-qualified path representing Catalog resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromCatalogName(catalogName) {
        return this.pathTemplates.catalogPathTemplate.match(catalogName).catalog;
    }
    /**
     * Return a fully-qualified completionConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @returns {string} Resource name string.
     */
    completionConfigPath(project, location, catalog) {
        return this.pathTemplates.completionConfigPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
        });
    }
    /**
     * Parse the project from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCompletionConfigName(completionConfigName) {
        return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).project;
    }
    /**
     * Parse the location from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCompletionConfigName(completionConfigName) {
        return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).location;
    }
    /**
     * Parse the catalog from CompletionConfig resource.
     *
     * @param {string} completionConfigName
     *   A fully-qualified path representing CompletionConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromCompletionConfigName(completionConfigName) {
        return this.pathTemplates.completionConfigPathTemplate.match(completionConfigName).catalog;
    }
    /**
     * Return a fully-qualified control resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} control
     * @returns {string} Resource name string.
     */
    controlPath(project, location, catalog, control) {
        return this.pathTemplates.controlPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
            control: control,
        });
    }
    /**
     * Parse the project from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromControlName(controlName) {
        return this.pathTemplates.controlPathTemplate.match(controlName).project;
    }
    /**
     * Parse the location from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromControlName(controlName) {
        return this.pathTemplates.controlPathTemplate.match(controlName).location;
    }
    /**
     * Parse the catalog from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromControlName(controlName) {
        return this.pathTemplates.controlPathTemplate.match(controlName).catalog;
    }
    /**
     * Parse the control from Control resource.
     *
     * @param {string} controlName
     *   A fully-qualified path representing Control resource.
     * @returns {string} A string representing the control.
     */
    matchControlFromControlName(controlName) {
        return this.pathTemplates.controlPathTemplate.match(controlName).control;
    }
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project, location, catalog, model) {
        return this.pathTemplates.modelPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
            model: model,
        });
    }
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
    }
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
    }
    /**
     * Parse the catalog from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).catalog;
    }
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
    }
    /**
     * Return a fully-qualified product resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} branch
     * @param {string} product
     * @returns {string} Resource name string.
     */
    productPath(project, location, catalog, branch, product) {
        return this.pathTemplates.productPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
            branch: branch,
            product: product,
        });
    }
    /**
     * Parse the project from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProductName(productName) {
        return this.pathTemplates.productPathTemplate.match(productName).project;
    }
    /**
     * Parse the location from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProductName(productName) {
        return this.pathTemplates.productPathTemplate.match(productName).location;
    }
    /**
     * Parse the catalog from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromProductName(productName) {
        return this.pathTemplates.productPathTemplate.match(productName).catalog;
    }
    /**
     * Parse the branch from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProductName(productName) {
        return this.pathTemplates.productPathTemplate.match(productName).branch;
    }
    /**
     * Parse the product from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the product.
     */
    matchProductFromProductName(productName) {
        return this.pathTemplates.productPathTemplate.match(productName).product;
    }
    /**
     * Return a fully-qualified servingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} catalog
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    servingConfigPath(project, location, catalog, servingConfig) {
        return this.pathTemplates.servingConfigPathTemplate.render({
            project: project,
            location: location,
            catalog: catalog,
            serving_config: servingConfig,
        });
    }
    /**
     * Parse the project from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServingConfigName(servingConfigName) {
        return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
            .project;
    }
    /**
     * Parse the location from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServingConfigName(servingConfigName) {
        return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
            .location;
    }
    /**
     * Parse the catalog from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the catalog.
     */
    matchCatalogFromServingConfigName(servingConfigName) {
        return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
            .catalog;
    }
    /**
     * Parse the serving_config from ServingConfig resource.
     *
     * @param {string} servingConfigName
     *   A fully-qualified path representing ServingConfig resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromServingConfigName(servingConfigName) {
        return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
            .serving_config;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.productServiceStub && !this._terminated) {
            return this.productServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ProductServiceClient = ProductServiceClient;
//# sourceMappingURL=product_service_client.js.map